{"tagline":"Sql Alchemy Persistor module for vert.x","note":"Don't delete this file! It's used internally to help with page regeneration.","body":"# Alchemy Persistor\r\n\r\nThis module allows data to be saved, retrieved, searched for, and deleted in a [Sql Alchemy][1] managed database.\r\n\r\n\r\n\r\n## Dependencies\r\n\r\nThis module requires a MongoDB server to be available on the network.\r\n\r\n## Name\r\n\r\nThe module name is `alchemy-persistor`.\r\n\r\n## Configuration\r\n\r\nThe alchemy-persistor module takes the following configuration:\r\n\r\n    {\r\n        \"address\":\"<address to listen to>\",\r\n        \"protocol\":\"<sql alchemy protocol>\",\r\n        \"host\":\"<database server hostname>\",\r\n        \"db_name\":\"<name of database>\",\r\n        \"username\":\"<username>\",\r\n        \"password\":\"<password>\",\r\n        \"model-path\":\"<path to the folder containing model definitions>\"\r\n    }\r\n    \r\nFor example:\r\n\r\n    {\r\n        \"address\":\"mysql.persistor\",\r\n        \"protocol\":\"mysql\",\r\n        \"host\":\"myserver.com\",\r\n        \"db_name\":\"mydb\",\r\n        \"username\":\"myname\",\r\n        \"password\":\"mypassword\",\r\n        \"model-path\":\"models\"\r\n    }        \r\n    \r\nLet's take a look at each field in turn:\r\n\r\n* `address` The main address for the module. Every module has a main address. Defaults to `alchemy-persistor`.\r\n* `protocol` Name of the sql alchemy protocol to use to connect to database. Defaults to `sqlite`.\r\n* `host` Host name or ip address of the MongoDB instance. Defaults to `localhost`.\r\n* `db_name` Name of the database to use.\r\n* `username` Username to use to connect to database.\r\n* `password` Password to use to connect to database.\r\n* `model-path` path to the folder containing model definitions. This folder should\r\n    containing python files with definition of your sql alchemy model classes.\r\n\r\n## Operations\r\n\r\nThe module supports the operations above. Please note that the operations protocol\r\nis identical to that used by [mongo persistor module][2].\r\n\r\nThis allow you to configure the use of alchemy persistor in every place where\r\nyou used Mongo persistor, without need to change your code.\r\n\r\nIn every operation, the `collection` param must refer to the name of\r\nthe Sql Alchemy class you want to work with.\r\n\r\n### Save\r\n\r\nSaves a row in the database.\r\n\r\nTo save a row send a JSON message to the module main address:\r\n\r\n    {\r\n        \"action\": \"save\",\r\n        \"collection\": <collection>,\r\n        \"document\": <document>\r\n    }     \r\n    \r\nWhere:\r\n* `collection` is the name of the Sql Alchemy table that you wish to save the document in. This field is mandatory.\r\n* `document` is the JSON document that you wish to save.\r\n\r\nAn example would be:\r\n\r\n    {\r\n        \"action\": \"save\",\r\n        \"collection\": \"users\",\r\n        \"document\": {\r\n            \"name\": \"tim\",\r\n            \"age\": 1000,\r\n            \"shoesize\": 3.14159,\r\n            \"username\": \"tim\",\r\n            \"password\": \"wibble\"\r\n        }\r\n    }  \r\n    \r\nWhen the save complete successfully, a reply message is sent back to the sender with the following data:\r\n\r\n    {\r\n        \"status\": \"ok\",\r\n        \"document\": {\r\n            \"name\": \"tim\",\r\n            \"age\": 1000,\r\n            \"shoesize\": 3.14159,\r\n            \"username\": \"tim\",\r\n            \"password\": \"wibble\"\r\n        }\r\n    }\r\n    \r\nThe reply will also contain a field `document` with the row that was saved to database.\r\nThis could be useful to retrieve the value of fields eventually setted by the Sql Alchemy class\r\nor by the database server.\r\n\r\nIf the row already exists in the database it will be updated, otherwise it will be inserted.\r\n\r\n\r\nIf an error occurs in saving the document a reply is returned:\r\n\r\n    {\r\n        \"status\": \"error\",\r\n        \"message\": <message>\r\n    }\r\n    \r\nWhere `message` is an error message.    \r\n\r\n            \r\n### Find\r\n\r\nFinds matching documents in the database.\r\n\r\nTo find documents send a JSON message to the module main address:\r\n\r\n    {\r\n        \"action\": \"find\",\r\n        \"collection\": <collection>,\r\n        \"matcher\": <matcher>,\r\n        \"limit\": <limit>,\r\n        \"batch_size\": <batch_size>\r\n    }     \r\n    \r\nWhere:\r\n* `collection` is the name of the Sql Alchemy table that you wish to search in in. This field is mandatory.\r\n* `matcher` is a JSON object that you want to match against to find matching documents. This obeys the normal mongo persistor matching rues.\r\n    Otherwise, it can be a string representing a query to issue on the db\r\n* `limit` is a number which determines the maximum total number of rows to return. This is optional. By default all rows are returned.\r\n\r\nAn example would be:\r\n\r\n    {\r\n        \"action\": \"find\",\r\n        \"collection\": \"orders\",\r\n        \"matcher\": {\r\n            \"item\": \"cheese\"\r\n        }\r\n    }  \r\n\r\n*This would return all orders where the `item` field has the value `cheese`*\r\n\r\nor using the query syntax for the matcher:\r\n\r\n    {\r\n        \"action\": \"find\",\r\n        \"collection\": \"orders\",\r\n        \"matcher\": \"item == 'cheese' or total > 100\"\r\n        }\r\n    }\r\n\r\n*This would return all orders where the `item` field has the value `cheese`, and the `qty` field is greater than 100*\r\n\r\n\r\n\r\nWhen the find complete successfully, a reply message is sent back to the sender with the following data:\r\n\r\n    {\r\n        \"status\": \"ok\",\r\n        \"results\": <results>\r\n    }   \r\n    \r\nWhere `results` is a JSON array containing the results of the find operation. For example:\r\n\r\n    {\r\n        \"status\": \"ok\",\r\n        \"results\": [\r\n            {\r\n                \"user\": \"tim\",\r\n                \"item\": \"cheese\",\r\n                \"total\": 123.45\r\n            },\r\n            {\r\n                \"user\": \"bob\",\r\n                \"item\": \"cheese\",\r\n                \"total\": 12.23\r\n            },\r\n            {\r\n                \"user\": \"jane\",\r\n                \"item\": \"cheese\",\r\n                \"total\": 50.05\r\n            }\r\n        ]\r\n    }\r\n    \r\nIf an error occurs in finding the documents a reply is returned:\r\n\r\n    {\r\n        \"status\": \"error\",\r\n        \"message\": <message>\r\n    }\r\n    \r\nWhere `message` is an error message. \r\n\r\n\r\n### Find One\r\n\r\nFinds a single matching document in the database.\r\n\r\nTo find a document send a JSON message to the module main address:\r\n\r\n    {\r\n        \"action\": \"findone\",\r\n        \"collection\": <collection>,\r\n        \"matcher\": <matcher>\r\n    }     \r\n\r\nWhere:\r\n* `collection` is the name of the Sql Alchemy table that you wish to search in in. This field is mandatory.\r\n* `matcher` is a JSON object that you want to match against to find matching documents. This obeys the normal mongo persistor matching rues.\r\n    Otherwise, it can be a string representing a query to issue on the db\r\n\r\nIf more than one document matches, just the first one will be returned.\r\n\r\nAn example would be:\r\n\r\n    {\r\n        \"action\": \"findone\",\r\n        \"collection\": \"orders\",\r\n        \"matcher\": {\r\n            \"item\": \"cheese\"\r\n        }\r\n    }  \r\n\r\n\r\n*This would return the first order where the `item` field has the value `cheese`*\r\n\r\nor using the query syntax for the matcher:\r\n\r\n    {\r\n        \"action\": \"findone\",\r\n        \"collection\": \"orders\",\r\n        \"matcher\": \"item == 'cheese' or total > 100\"\r\n        }\r\n    }\r\n\r\n*This would return the first order where the `item` field has the value `cheese`, and the `qty` field is greater than 100*\r\n\r\n\r\nWhen the find complete successfully, a reply message is sent back to the sender with the following data:\r\n\r\n    {\r\n        \"status\": \"ok\",\r\n        \"result\": <result>\r\n    }       \r\n    \r\nIf an error occurs in finding the documents a reply is returned:\r\n\r\n    {\r\n        \"status\": \"error\",\r\n        \"message\": <message>\r\n    }\r\n    \r\nWhere `message` is an error message. \r\n\r\n### Delete\r\n\r\nDeletes matching documents in the database.\r\n\r\nTo delete documents send a JSON message to the module main address:\r\n\r\n    {\r\n        \"action\": \"delete\",\r\n        \"collection\": <collection>,\r\n        \"matcher\": <matcher>\r\n    }     \r\n\r\n\r\nWhere:\r\n* `collection` is the name of the Sql Alchemy table that you wish to delete from. This field is mandatory.\r\n* `matcher` is a JSON object that you want to match against to find matching documents. This obeys the normal mongo persistor matching rues.\r\n    Otherwise, it can be a string representing a query to issue on the db\r\n\r\nAll documents that match will be deleted.\r\n\r\nAn example would be:\r\n\r\n    {\r\n        \"action\": \"delete\",\r\n        \"collection\": \"items\",\r\n        \"matcher\": {\r\n            \"item\": \"cheese\"\r\n        }\r\n    }  \r\n    \r\n\r\n*This would delete all orders where the `item` field has the value `cheese`*\r\n\r\n\r\nor using the query syntax for the matcher:\r\n\r\n    {\r\n        \"action\": \"delete\",\r\n        \"collection\": \"orders\",\r\n        \"matcher\": \"item == 'cheese' or total > 100\"\r\n        }\r\n    }\r\n\r\n*This would delete all orders where the `item` field has the value `cheese`, and the `qty` field is greater than 100*\r\n\r\nWhen the find complete successfully, a reply message is sent back to the sender with the following data:\r\n\r\n    {\r\n        \"status\": \"ok\",\r\n        \"number\": <number>\r\n    }       \r\n    \r\nWhere `number` is the number of documents deleted.    \r\n    \r\nIf an error occurs in finding the documents a reply is returned:\r\n\r\n    {\r\n        \"status\": \"error\",\r\n        \"message\": <message>\r\n    }\r\n    \r\nWhere `message` is an error message.\r\n\r\n\r\n[1]: http://www.sqlalchemy.org/\r\n[2]: https://github.com/vert-x/mod-mongo-persistor","google":"UA-34497228-1","name":"Mod Alchemy Persistor"}